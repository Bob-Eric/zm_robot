// Generated by gencpp from file zm_robot_control/agv_position.msg
// DO NOT EDIT!


#ifndef ZM_ROBOT_CONTROL_MESSAGE_AGV_POSITION_H
#define ZM_ROBOT_CONTROL_MESSAGE_AGV_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zm_robot_control
{
template <class ContainerAllocator>
struct agv_position_
{
  typedef agv_position_<ContainerAllocator> Type;

  agv_position_()
    : position_x(0.0)
    , position_y(0.0)
    , position_th(0.0)  {
    }
  agv_position_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , position_th(0.0)  {
  (void)_alloc;
    }



   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_th_type;
  _position_th_type position_th;





  typedef boost::shared_ptr< ::zm_robot_control::agv_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zm_robot_control::agv_position_<ContainerAllocator> const> ConstPtr;

}; // struct agv_position_

typedef ::zm_robot_control::agv_position_<std::allocator<void> > agv_position;

typedef boost::shared_ptr< ::zm_robot_control::agv_position > agv_positionPtr;
typedef boost::shared_ptr< ::zm_robot_control::agv_position const> agv_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zm_robot_control::agv_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zm_robot_control::agv_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zm_robot_control::agv_position_<ContainerAllocator1> & lhs, const ::zm_robot_control::agv_position_<ContainerAllocator2> & rhs)
{
  return lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_th == rhs.position_th;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zm_robot_control::agv_position_<ContainerAllocator1> & lhs, const ::zm_robot_control::agv_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zm_robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zm_robot_control::agv_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zm_robot_control::agv_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zm_robot_control::agv_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zm_robot_control::agv_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zm_robot_control::agv_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zm_robot_control::agv_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zm_robot_control::agv_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d80c6877848b4503a7d6faae31bc09a";
  }

  static const char* value(const ::zm_robot_control::agv_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d80c6877848b450ULL;
  static const uint64_t static_value2 = 0x3a7d6faae31bc09aULL;
};

template<class ContainerAllocator>
struct DataType< ::zm_robot_control::agv_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zm_robot_control/agv_position";
  }

  static const char* value(const ::zm_robot_control::agv_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zm_robot_control::agv_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position_x\n"
"float64 position_y\n"
"float64 position_th\n"
"\n"
;
  }

  static const char* value(const ::zm_robot_control::agv_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zm_robot_control::agv_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_th);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct agv_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zm_robot_control::agv_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zm_robot_control::agv_position_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_th: ";
    Printer<double>::stream(s, indent + "  ", v.position_th);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZM_ROBOT_CONTROL_MESSAGE_AGV_POSITION_H
